<?xml version="1.0" encoding="UTF-8"?>
<project name="openadaptor" default="cruise">
	<description>
		Second generation ant build script for openadaptor
	</description>

	<!-- 
	  Set copyright.auto_fix to true to automatically fix copyright notices.
	  Warning: this may modify source files!
	  -->
	<property name="copyright.auto_fix" value="false" />

	<!-- If set, the src.jar jarfile will not be created 
	<property name="suppress.src.jar" value="set" />
	-->
	
	<!-- If set, tests will not be executed 
	<property name="suppress.tests" value="set"/>
	-->

	<!-- If set, javadocs will not be generated 
	<property name="suppress.javadoc" value="set"/>
	-->
	
	<!-- If set, springcheck will not be run
	<property name="suppress.springcheck" value="set"/>
	-->
	
	<!-- If set, example documentation will not be generated	
	<property name="suppress.example.doc" value="set"/>
	-->
	
	<echo level="info" message="Trying ${basedir}/checkout.properties for checkout properties" />
	<property file="${basedir}/checkout.properties" />

	<property name="hosted.upload.properties.file" value="${basedir}/src/hosting.properties"/>
	<echo level="info" message="Trying ${hosted.upload.properties.file} for hosted upload config" />
	<property file="${hosted.upload.properties.file}" />

	<target name="init" description="Initialisation of tag,directories and classpaths">
		<echo level="info" message="Initialising directories and classpaths" />
		<tstamp/>
		<property name="debug" value="true" />
		<!-- Initialise tag variable (unless it has already been explicitly set) -->
		<property name="tag" value="trunk" />
		<echo level="info" message="Initialised $tag value is: ${tag}" />
		<property name="licence.dir" value="${basedir}" />
		<property name="licence.3rdparty.dir" value="${basedir}/licences"/>
		<property name="licence.file" value="licence.txt" />
		
		<property name="build.timestamp" value="${DSTAMP}:${TSTAMP}" />
		<echo level="info" message="Build [${tag}] timestamp: ${build.timestamp}" />
		<property name="dir.src" value="${basedir}/src" />
		<property name="dir.lib" value="${basedir}/lib" />
		<property name="dir.example" value="${basedir}/example" />
		<property name="dir.faq" value="${basedir}/www" />
		<property name="dir.sql" value="${basedir}/sql" />

		<property name="dir.test" value="${basedir}/test" />
		<property name="dir.test.lib" value="${dir.test}/lib" />
		<property name="dir.test.src.unit" value="${dir.test}/unit/src" />
		<property name="dir.test.src.integration" value="${dir.test}/integration/src" />
		<property name="dir.test.src.system" value="${dir.test}/system/src" />

		<property name="dir.spring" value="${basedir}/spring" />
		<property name="dir.spring.src" value="${dir.spring}/src" />
		<property name="dir.spring.lib" value="${dir.spring}/lib" />
		<!-- Source root for stub code, e.g. tibco, legacy -->
		<property name="dir.stub.src" value="${basedir}/stub/src" />

		<!-- Directories for build output -->
		<property name="dir.build" value="${basedir}/build" />
		<property name="dir.build.lib" value="${dir.build}/lib" />
		<property name="dir.build.classes" value="${dir.build}/classes" />
		<property name="dir.build.support" value="${dir.build}/support" /> 
		<property name="dir.build.example" value="${dir.build}/example" />

		<property name="dir.build.test" value="${dir.build}/test" />
		<property name="dir.build.test.classes" value="${dir.build.test}/classes" />

		<property name="dir.build.stub" value="${dir.build}/stub" />
		<property name="dir.build.stub.classes" value="${dir.build.stub}/classes" />
		<property name="dir.build.spring.classes" value="${dir.build}/spring/classes" />
		<property name="dir.build.javadocs" value="${dir.build}/javadocs" />

		<!-- Base directory for output package -->
		<property name="dir.package" value="${dir.build}/package" />

		<!-- Directories for tool to support the build (e.g. ant custom tasks) -->
		<property name="dir.support" value="${basedir}/support" />
		<property name="dir.support.src" value="${dir.support}/src" />
		<property name="dir.support.lib" value="${dir.support}/lib" />
		<property name="dir.build.support.classes" value="${dir.build.support}/classes" />

		<path id="classpath.lib">
			<pathelement path="${dir.lib}" />
			<fileset dir="${dir.lib}" includes="**/*.jar,**/*.zip" />
		</path>

		<path id="classpath">
			<path refid="classpath.lib" />
			<pathelement path="${dir.build.stub.classes}" />
		</path>
		
		<echo level="info" message="Creating classpath.support with ${dir.support.lib},${dir.build.support.classes}, classpath and ${dir.support.lib}"/>

		<!-- Note ant 1.6.5 seems to include incompatible version of xercesImpl -->
	  <path id="classpath.support">
			<pathelement path="${dir.build.support.classes}"/>
			<pathelement path="${dir.support.lib}"/>
			<fileset dir="${dir.support.lib}" includes="**/*.jar,**/*.zip" />
			<path refid="classpath"/>
		</path>
		
		<path id="classpath.spring">
			<pathelement path="${dir.build.classes}" />
			<fileset dir="${dir.spring.lib}" includes="**/*.jar,**/*.zip" />
			<path refid="classpath" />
		</path>
	</target>
	
	<target name="init.support.tasks" depends="compile.support" description="Prepare custom ant support tasks">
		<echo level="info" message="Preparing custom ant support tasks"/>
		<taskdef name="spring.validate" classname="org.openadaptor.util.ant.SpringConfigValidateTask" classpath="${dir.build.support.classes}" />
		<taskdef name="copyright" classname="org.openadaptor.util.ant.CopyrightTask" classpath="${dir.build.support.classes}" />
		<taskdef name="upload" classname="org.openadaptor.util.ant.HostedFileUploadTask" classpathref="classpath.support"/>
	</target>
		
	<target name="init.test" depends="init" description="Initialisation for tests">
		<echo level="info" message="Creating test directories under ${dir.build.test}" />
		<property name="dir.build.test.classes" value="${dir.build.test}/classes" />
		<property name="dir.build.test.output" value="${dir.build.test}/output" />
		<mkdir dir="${dir.build.test}" />
		<mkdir dir="${dir.build.test.classes}" />
		<mkdir dir="${dir.build.test.output}" />

		<property name="test.vm.dir" value="${basedir}" />
		<property name="test.printsummary" value="true" />
		<property name="test.showoutput" value="false" />
		<property name="test.formatter" value="xml" />
		<property name="test.batchtest.fork" value="yes" />

		<property name="test.namefilter" value="**/*TestCase.java" />

		<path id="classpath.test.compile">
			<fileset dir="${dir.test.lib}" includes="**/*.jar,**/*.zip" />
			<pathelement path="${dir.build.spring.classes}" />
			<path refid="classpath.spring" />
		</path>

		<!-- Include the source paths, handy for stack trace info -->
		<!-- Include ${dir.test.lib} to find log4j.properties -->
		<echo level="info" message="Tests require Licence file on CP, adding ${licence.dir} (not needed when testing using openadaptor.jar)" />
		<path id="classpath.test">
			<pathelement path="${dir.test.lib}" />
			<pathelement path="${licence.dir}" />
			<pathelement path="${dir.test.src.unit}" />
			<pathelement path="${dir.test.src.integration}" />
			<pathelement path="${dir.test.src.system}" />
			<pathelement path="${dir.build.test.classes}" />
			<path refid="classpath.test.compile" />
			<pathelement path="${dir.src}" />
			<pathelement path="${dir.spring.src}" />
		</path>

	</target>

	<!-- Compilation tasks -->
	<target name="make.dirs" depends="init" description="Create build area ${dir.build}">
		<mkdir dir="${dir.build}" />
		<mkdir dir="${dir.build.javadocs}" />
		<mkdir dir="${dir.build.support}" />
		<mkdir dir="${dir.build.example}" />
	</target>

	<target name="compile.support" depends="make.dirs" description="Compile support tools (custom ant tasks etc.)">
		<echo level="info" message="Compiling support tools ${dir.support.src}->${dir.build.support.classes}" />
		<mkdir dir="${dir.build.support.classes}" />
		<javac srcdir="${dir.support.src}" 
			   destdir="${dir.build.support.classes}" 
			   classpathref="classpath.support" 
			   debug="${debug}" 
			   source="1.4"
			   target="1.4"
		/>
	</target>

	<target name="compile.stub" depends="make.dirs" description="Compile stub classes: legacy oa,mq and tibrv">
		<echo level="info" message="Compiling stub src (legacy oa,mq and tibrv) ${dir.stub.src}->${dir.build.stub.classes}" />
		<mkdir dir="${dir.build}" />
		<mkdir dir="${dir.build.stub}" />
		<mkdir dir="${dir.build.stub.classes}" />
		<javac srcdir="${dir.stub.src}" 
			   destdir="${dir.build.stub.classes}" 
			   classpathref="classpath" 
			   debug="${debug}" 
			   source="1.4"
			   target="1.4"
		/>
	</target>

	<target name="compile.src" depends="compile.stub" description="Compile openadaptor source code">
		<echo level="info" message="Compiling oa source ${dir.src}->${dir.build.classes}" />
		<mkdir dir="${dir.build.classes}" />
		<javac srcdir="${dir.src}" 
			   destdir="${dir.build.classes}" 
			   classpathref="classpath" 
			   debug="${debug}" 
			   source="1.4"
		       target="1.4"
		/>
	</target>

	<target name="compile.spring" depends="compile.src" description="Compile openadaptor spring source code">
		<echo level="info" message="Compiling oa spring source ${dir.spring.src}->${dir.build.spring.classes}" />
		<mkdir dir="${dir.build.spring.classes}" />
		<javac srcdir="${dir.spring.src}" 
			   destdir="${dir.build.spring.classes}" 
			   classpathref="classpath.spring" 
			   debug="${debug}"
			   source="1.4"
			   target="1.4"
		/>
	</target>

	<target name="compile" depends="compile.stub,compile.src,compile.spring,compile.support" description="Compile all source code" />

	<target name="copy.configs" depends="compile" description="Copy build information to build area">
		<echo level="info" message="Copying/building licence, build and licence.txt, .openadaptor.properties,registration.properties" />
		<copy todir="${dir.build.classes}" overwrite="true">
			<fileset dir="${dir.src}">
				<include name=".openadaptor.properties" />
			</fileset>
			<fileset dir="${licence.dir}">
				<include name="${licence.file}"/>
			</fileset>
			
			<filterset>
				<filter token="BUILDCOMPILER" value="${ant.java.version}" />
				<filter token="BUILDTIME" value="${DSTAMP}:${TSTAMP}" />
				<filter token="BUILDTAG" value="${tag}" />
			</filterset>
		</copy>

	</target>

	<!-- 
    Currently unit test source has a dependency on common class in integration
     Namely TestComponent. This needs to be reorganised.
    -->
	<target name="compile.test.unit" depends="compile.test.integration" description="Compile unit test code">
		<echo level="info" message="Compiling unit test source ${dir.test.src.unit}->${dir.build.test.classes}" />
		<javac srcdir="${dir.test.src.unit}" destdir="${dir.build.test.classes}" classpathref="classpath.test.compile" debug="${debug}" />
	</target>

	<target name="compile.test.integration" depends="compile,init.test" description="Compile integration test code">
		<echo level="info" message="Compiling integration test source ${dir.test.src.integration}->${dir.build.test.classes}" />
		<javac srcdir="${dir.test.src.integration}" destdir="${dir.build.test.classes}" classpathref="classpath.test.compile" debug="${debug}" />
	</target>

	<target name="compile.test.system" depends="compile.test.unit" description="Compile system test code">
		<echo level="info" message="Compiling system test source ${dir.test.src.system}->${dir.build.test.classes}" />
		<javac srcdir="${dir.test.src.system}" destdir="${dir.build.test.classes}" classpathref="classpath.test.compile" debug="${debug}" />
	</target>

	<target name="compile.test" depends="compile.test.integration,compile.test.unit,compile.test.system" description="compile all test code" />

	<target name="compile.all" depends="compile.spring,compile.test" description="Compile all source code" />

	<!-- Test tasks -->
	<target name="test.unit" depends="compile.test" description="Unit tests (against compiled classes)" unless="suppress.tests">

		<echo level="info" message="Running unit tests" />
		<junit printsummary="${test.printsummary}" dir="${test.vm.dir}" showoutput="${test.showoutput}">
			<classpath refid="classpath.test" />
			<formatter type="${test.formatter}" />
			<batchtest fork="${test.batchtest.fork}" todir="${dir.build.test.output}" errorProperty="test.failed" failureProperty="test.failed">
				<fileset dir="${dir.test.src.unit}" includes="${test.namefilter}" />
			</batchtest>
		</junit>
	</target>

	<target name="test.integration" depends="compile.test" description="Integration tests (against compiled classes)" unless="suppress.tests">
		<echo level="info" message="Running integration tests" />
		<junit printsummary="${test.printsummary}" dir="${test.vm.dir}" showoutput="${test.showoutput}">
			<classpath refid="classpath.test" />
			<formatter type="${test.formatter}" />
			<batchtest fork="${test.batchtest.fork}" todir="${dir.build.test.output}" errorProperty="test.failed" failureProperty="test.failed" unless="test.failed">
				<fileset dir="${dir.test.src.integration}" includes="${test.namefilter}" />
			</batchtest>
		</junit>
	</target>

	<target name="test.system" depends="compile.test" description="System tests (against compiled classes)" unless="suppress.tests">
		<echo level="info" message="Running system tests" />
		<echo level="warning" message="Excluding **/WebService*TestCase.java" />
		<echo level="warning" message="Excluding **/MQ*.java" />
		<echo level="warning" message="Excluding **/TIBCO*.java" />
		<echo level="warning" message="Excluding **/RMIConnectorTestCase.java"/>
		<junit printsummary="${test.printsummary}" dir="${test.vm.dir}" showoutput="${test.showoutput}">
			<classpath refid="classpath.test" />
			<formatter type="${test.formatter}" />
			<batchtest fork="${test.batchtest.fork}" todir="${dir.build.test.output}" errorProperty="test.failed" failureProperty="test.failed" unless="test.failed">
				<fileset dir="${dir.test.src.system}" includes="${test.namefilter}">
					<exclude name="**/WebService*TestCase.java" />
					<exclude name="**/MQ*.java" />
					<exclude name="**/TIBCO*.java" />
					<exclude name="**/RMIConnectorTestCase.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="test.unit.system.integration" depends="test.unit,test.integration,test.system" description="Perform all tests (unit,integration,system)">
		<echo level="info" message="Generating report from test execution" />
		<junitreport todir="${dir.build.test.output}">
			<fileset dir="${dir.build.test.output}" includes="TEST-*.xml" />
			<report format="frames" todir="${dir.build.test.output}" />
		</junitreport>
		<fail message="Tests failed: check ${dir.build.test.output}" if="test.failed" />
	</target>
	
	<target name="test.all" depends="clean.build.test,test.unit.system.integration" description="Perform clean+all tests (unit,integration,system)" unless="suppress.tests"/>

	<target name="test.suppressed" description="Warns of suppressed tests" if="suppress.tests">
		<echo message="Test execution has been suppressed (as suppress.tests is set)" />
	</target>

	<!-- Spring Example validations -->
	<target name="test.spring.examples" depends="init.test,init.support.tasks,copy.configs" description="Validate Spring example configurations" unless="suppress.springcheck">
		<echo level="info" message="Validating Spring examples in ${dir.example}" />
		<spring.validate classpathref="classpath.test" ignorestubexceptions="true">
			<fileset dir="${dir.example}/spring">
				<include name="**/*.xml" />
				<exclude name="**/input/*" />
				<exclude name="**/output/*" />
				<exclude name="**/mq-*.xml" />
				<exclude name="**/file/enrich-*.xml" />
				<exclude name="**/db/jee/jboss/oa*.xml" />
				<exclude name="transaction/spring-local-txn-demo.xml"/>
			</fileset>
		</spring.validate>
	</target>

	<target name="test.spring.examples.suppressed" description="Warns of suppressed spring examples validation" if="suppress.springcheck">
		<echo message="Validation of spring examples has been suppressed (as suppress.springcheck is set)" />
	</target>

	<!-- Javadoc tasks -->
	<target name="javadocs" depends="init" description="Compile javadoc from openadaptor source" unless="suppress.javadoc">
		<echo level="info" message="Generating javadoc ${dir.src},${dir.spring.src} -> ${dir.build.javadocs}" />
		<javadoc destdir="${dir.build.javadocs}" classpathref="classpath.spring" doctitle="openadaptor ${tag}" verbose="false" additionalparam="-quiet" useexternalfile="yes">
			<fileset dir="${dir.src}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${dir.spring.src}">
				<include name="**/*.java" />
			</fileset>
		</javadoc>
	</target>

	<target name="javadocs.suppressed" description="Warns of suppressed javadoc generation" if="suppress.javadoc">
		<echo message="*** JAVADOC GENERATION HAS BEEN SUPPRESSED (suppress.javadoc is set) ***" />
	</target>

	<!-- Automatic Example documentation creation -->
	<target name="example.doc" depends="init" unless="suppress.example.doc">
		<mkdir dir="${dir.build.example}/docs"/>
		<ant antfile="docs.xml" dir="${dir.example}/tools" target="docs">
			<property name="docgen.project.name" value="${ant.project.name}"/>
			<property name="docgen.bin" value="${dir.example}/tools"/>
			<property name="docgen.input.dir" value="${dir.example}"/>
			<property name="docgen.output.dir" value="${dir.build.example}/docs"/>
		</ant>
	</target>
	
	<target name="example.doc.suppressed" description="Warns of suppressed example doc generation" if="suppress.example.doc">
		<echo message="*** EXAMPLE DOCUMENTATION GENERATION HAS BEEN SUPPRESSED (suppress.example.doc is set) ***" />
	</target>

	<!-- Packaging tasks -->
	<target name="copyright.validate" depends="init,init.support.tasks" description="checks copyright notices in code">
		<echo level="info" message="Checking copyright notices on ${dir.src},${dir.spring.src},${dir.example}" />
		<echo level="info" message="Automatic fix flag value: ${copyright.auto_fix}" />
		<copyright update="${copyright.auto_fix}" backupdir="${dir.buildtools.backup}" copyright="${licence.dir}/${licence.file}">
			<fileset dir="${dir.src}" includes="**/*.java" />
			<fileset dir="${dir.spring.src}" includes="**/*.java" />
			<fileset dir="${dir.example}" includes="**/*.java" />
			<fileset dir="${dir.support}" includes="**/*.java" />
		</copyright>
	</target>

	<target name="jars.compiled" depends="compile,test.all,test.suppressed,test.spring.examples,test.spring.examples.suppressed,copy.configs" description="Create jars from compiled classes">
		<echo level="info" message="Creating jars from compiled classes to ${dir.build.lib}" />
		<mkdir dir="${dir.build.lib}" />

		<echo level="info" message="Building ${dir.build.lib}/openadaptor.jar"/>
		<jar destfile="${dir.build.lib}/openadaptor.jar">
	     <manifest>
	        <attribute name="Main-Class" value="org.openadaptor.JarLauncher"/>
		  		<attribute name="Built-By" value="${user.name}"/>
		  	  <attribute name="Build-Tag" value="${tag}"/>
		  	  <attribute name="Build-Timestamp" value="${DSTAMP}:${TSTAMP}"/>
	     </manifest>
			<fileset dir="${dir.build.classes}" />
		</jar>

		<echo level="info" message="Building ${dir.build.lib}/openadaptor-spring.jar"/>
		<echo level="warning" message="Explicitly copying .openadaptor-spring.xml (${dir.spring.src}/org/openadaptor/spring/.openadaptor-spring.xml) into jar." />
		<jar destfile="${dir.build.lib}/openadaptor-spring.jar">
	  	<manifest>
	  		<attribute name="Built-By" value="${user.name}"/>
	  	  <attribute name="Build-Tag" value="${tag}"/>
	  	  <attribute name="Build-Timestamp" value="${DSTAMP}:${TSTAMP}"/>
	  	</manifest>
			<fileset dir="${dir.build.spring.classes}" />
			<!-- ToDo: This is a hangover from old env. Should be possible to remove soon -->
			<!-- <filename name="${dir.spring.src}/org/openadaptor/spring/.openadaptor-spring.xml" /> -->
			<fileset dir="${dir.spring.src}" includes="org/openadaptor/spring/.openadaptor-spring.xml"/>
		</jar>

		<!-- ToDo: Completely rework the bootstrap concept -->
		<echo level="info" message="Generating ${dir.build.lib}/bootstrap.jar"/>
    <jar destfile="${dir.build.lib}/bootstrap.jar">
      <fileset dir="${dir.build.classes}" includes="org/openadaptor/bootstrap/*"/>
      <fileset dir="${dir.build.spring.classes}" includes="org/openadaptor/bootstrap/*"/>
      <fileset dir="${dir.lib}" includes="log4j.properties"/>
      <manifest>
        <attribute name="Main-Class" value="org.openadaptor.bootstrap.Usage"/>
      </manifest>
    </jar>

		<!-- ToDo: Check if we really need the stub jar; perhaps for testing only -->
		<jar destfile="${dir.build.lib}/openadaptor-stub.jar">
	  	<manifest>
	  		<attribute name="Built-By" value="${user.name}"/>
	  	  <attribute name="Build-Tag" value="${tag}"/>
	  	  <attribute name="Build-Timestamp" value="${DSTAMP}:${TSTAMP}"/>
	  	</manifest>
			<fileset dir="${dir.build.stub.classes}" />
		</jar>

	</target>

	<target name="openadaptor-spring-src.jar" depends="compile" description="Create jar from openadaptor sources ${dir.spring.src}" unless="suppress.src.jar">
		<echo level="info" message="Creating jars from from openadaptor sources {dir.spring.src}" />
		<jar destfile="${dir.build.lib}/openadaptor-spring-src.jar">
	  	<manifest>
	  		<attribute name="Built-By" value="${user.name}"/>
	  	  <attribute name="Build-Tag" value="${tag}"/>
	  	  <attribute name="Build-Timestamp" value="${DSTAMP}:${TSTAMP}"/>
	  	</manifest>
			<fileset dir="${dir.spring.src}" />
		</jar>
	</target>

	<target name="openadaptor-src.jar" depends="compile" description="Create jar from openadaptor sources ${dir.src}" unless="suppress.src.jar">
		<echo level="info" message="Creating jars from from openadaptor sources ${dir.src}" />
		<jar destfile="${dir.build.lib}/openadaptor-src.jar">
	  	<manifest>
	  		<attribute name="Built-By" value="${user.name}"/>
	  	  <attribute name="Build-Tag" value="${tag}"/>
	  	  <attribute name="Build-Timestamp" value="${DSTAMP}:${TSTAMP}"/>
	  	</manifest>
			<fileset dir="${dir.src}" />
		</jar>
	</target>
	
	<target name="src.jar" depends="compile,openadaptor-src.jar,openadaptor-spring-src.jar" description="Create jar from openadaptor sources" unless="suppress.src.jar">
		<echo level="info" message="Creating jars from from openadaptor sources ${dir.src}, ${dir.spring.src}" />
	</target>

	<target name="src.jar.suppressed" description="Warns of suppressed source jar generation" if="suppress.src.jar">
		<echo level="info" message="Source jar generation is suppressed (suppress.src.jar is set)" />
	</target>

	<target name="jar.depends" depends="jars.compiled" description="Create openadaptor-depends.jar from 3rd party libs">
		<echo level="info" message="Creating ${dir.build.lib}/openadaptor-depends.jar from 3rd party libraries" />

		<property name="includes.unqualified" value="net/sourceforge/**,org/**,javax/**,com/**,META-INF/services/**,META-INF/spring*" />
		<echo level="info" message="includes.unqualified = ${includes.unqualified}" />

		<jar destfile="${dir.build.lib}/openadaptor-depends.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Created" value="${build.timestamp}"/>
				<attribute name="Version" value="${tag}"/>
			</manifest>
			<!-- ordered list of jars, only includes qualified resources -->
	      <zipfileset src="${dir.lib}/joda-time-1.5.2.jar" includes="${includes.unqualified}"/>	
		  <zipfileset src="${dir.lib}/FastInfoset_1.2.7.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/geronimo-annotation_1.0_spec_1.1.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jaxb-api_2.1.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jaxb-impl_2.1.12.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/jaxb-xjc_2.1.12.jar" includes="${includes.unqualified}"/>
			<zipfileset src="${dir.lib}/XmlSchema_1.4.5.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/carol.jar" includes="${includes.unqualified},carol-defaults.properties" />
			<zipfileset src="${dir.lib}/commons-codec_1.3.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/commons-collections_3.2.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/commons-httpclient_3.1.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/commons-jxpath_1.2.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/commons-lang_2.4.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/commons-logging.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/commons-net_1.2.2.jar" includes="${includes.unqualified}" />
      <zipfileset src="${dir.lib}/commons-dbcp-1.2.2.jar" includes="${includes.unqualified}"/>
      <zipfileset src="${dir.lib}/commons-pool-1.3.jar" includes="${includes.unqualified}"/>
			<zipfileset src="${dir.lib}/dom4j_1.6.1.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jaxen_1.1-beta-9.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jaxrpc.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jaxws-api_2.1-1.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jdom_1.0.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jetty-util_6.1.9.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jetty_6.1.9.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jms.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jmxremote.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jmxri.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jmxtools.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jonas_timer.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jotm.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jotm_jrmp_stubs.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/js.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/json.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/jta-spec_1.0.1.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/log4j-1.2.15.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/qname.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/quartz_1.5.2.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/resolver_from_xerces_2.9.0.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/rome_0.9.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/saaj.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/serializer_from_xerces_2.9.0.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/servlet-api_2.5-6.0.1.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/stax-api_1.0.1.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/velocity_1.4.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/wife.jar" includes="${includes.unqualified} countries.properties currencies.properties"/>
			<zipfileset src="${dir.lib}/wsdl4j_1.6.2.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/wstx-asl_3.0.1.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/xercesImpl_2.9.0.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/xfire-all_1.2.6.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/xml-apis_from_xerces_2.9.0.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/xstream-1.2.1.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.lib}/script.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.spring.lib}/spring-core.jar" includes="${includes.unqualified}" />
			<zipfileset src="${dir.spring.lib}/spring.jar" includes="${includes.unqualified}" />
		  <zipfileset src="${dir.lib}/neethi-3.0.3.jar" includes="${includes.unqualified}"/>
			<!-- ordered list of jars, includes non-qualified resources but with prefix -->
			<zipfileset src="${dir.lib}/joda-time-1.5.2.jar" excludes="${includes.unqualified}" prefix="joda-time"/>
      <zipfileset src="${dir.lib}/FastInfoset_1.2.7.jar" excludes="${includes.unqualified}" prefix="fast-infoset"/>
      <zipfileset src="${dir.lib}/geronimo-annotation_1.0_spec_1.1.1.jar" excludes="${includes.unqualified}" prefix="geronimo"/>
      <zipfileset src="${dir.lib}/jaxb-api_2.1.jar" excludes="${includes.unqualified}" prefix="jaxb"/>
      <zipfileset src="${dir.lib}/jaxb-impl_2.1.12.jar" excludes="${includes.unqualified}" prefix="jaxb"/>
      <zipfileset src="${dir.lib}/jaxb-xjc_2.1.12.jar" excludes="${includes.unqualified}" prefix="jaxb"/>
			<zipfileset src="${dir.lib}/XmlSchema_1.4.5.jar" excludes="${includes.unqualified}" prefix="XmlSchema" />
			<zipfileset src="${dir.lib}/carol.jar" excludes="${includes.unqualified},carol-defaults.properties" prefix="carol" />
			<zipfileset src="${dir.lib}/commons-codec_1.3.jar" excludes="${includes.unqualified}" prefix="commons-codec" />
			<zipfileset src="${dir.lib}/commons-collections_3.2.jar" excludes="${includes.unqualified}" prefix="commons-collections" />
			<zipfileset src="${dir.lib}/commons-httpclient_3.1.jar" excludes="${includes.unqualified}" prefix="commons-httpclient" />
			<zipfileset src="${dir.lib}/commons-jxpath_1.2.jar" excludes="${includes.unqualified}" prefix="commons-jxpath" />
			<zipfileset src="${dir.lib}/commons-lang_2.4.jar" excludes="${includes.unqualified}" prefix="commons-lang" />
			<zipfileset src="${dir.lib}/commons-logging.jar" excludes="${includes.unqualified}" prefix="commons-logging" />
			<zipfileset src="${dir.lib}/commons-net_1.2.2.jar" excludes="${includes.unqualified}" prefix="commons-net" />
      <zipfileset src="${dir.lib}/commons-dbcp-1.2.2.jar" includes="${includes.unqualified}" prefix="commons-dbcp"/>
      <zipfileset src="${dir.lib}/commons-pool-1.3.jar" includes="${includes.unqualified}" prefix="commons-pool"/>
			<zipfileset src="${dir.lib}/dom4j_1.6.1.jar" excludes="${includes.unqualified}" prefix="dom4j" />
			<zipfileset src="${dir.lib}/jaxen_1.1-beta-9.jar" excludes="${includes.unqualified}" prefix="jaxen" />
			<zipfileset src="${dir.lib}/jaxrpc.jar" excludes="${includes.unqualified}" prefix="jaxrpc" />
			<zipfileset src="${dir.lib}/jaxws-api_2.1-1.jar" excludes="${includes.unqualified}" prefix="jaxws-api" />
			<zipfileset src="${dir.lib}/jdom_1.0.jar" excludes="${includes.unqualified}" prefix="jdom" />
			<zipfileset src="${dir.lib}/jetty-util_6.1.9.jar" excludes="${includes.unqualified}" prefix="jetty-util" />
			<zipfileset src="${dir.lib}/jetty_6.1.9.jar" excludes="${includes.unqualified}" prefix="jetty" />
			<zipfileset src="${dir.lib}/jms.jar" excludes="${includes.unqualified}" prefix="jms" />
			<zipfileset src="${dir.lib}/jmxremote.jar" excludes="${includes.unqualified}" prefix="jmxremote" />
			<zipfileset src="${dir.lib}/jmxri.jar" excludes="${includes.unqualified}" prefix="jmxri" />
			<zipfileset src="${dir.lib}/jmxtools.jar" excludes="${includes.unqualified}" prefix="jmxtools" />
			<zipfileset src="${dir.lib}/jonas_timer.jar" excludes="${includes.unqualified}" prefix="jonas_timer" />
			<zipfileset src="${dir.lib}/jotm.jar" excludes="${includes.unqualified}" prefix="jotm" />
			<zipfileset src="${dir.lib}/jotm_jrmp_stubs.jar" excludes="${includes.unqualified}" prefix="jotm_jrmp_stubs" />
			<zipfileset src="${dir.lib}/js.jar" excludes="${includes.unqualified}" prefix="js" />
			<zipfileset src="${dir.lib}/json.jar" excludes="${includes.unqualified}" prefix="json" />
			<zipfileset src="${dir.lib}/jta-spec_1.0.1.jar" excludes="${includes.unqualified}" prefix="jta-spec" />
			<zipfileset src="${dir.lib}/log4j-1.2.15.jar" excludes="${includes.unqualified}" prefix="log4j" />
			<zipfileset src="${dir.lib}/qname.jar" excludes="${includes.unqualified}" prefix="qname" />
			<zipfileset src="${dir.lib}/quartz_1.5.2.jar" excludes="${includes.unqualified}" prefix="quartz" />
			<zipfileset src="${dir.lib}/resolver_from_xerces_2.9.0.jar" excludes="${includes.unqualified}" prefix="resolver" />
			<zipfileset src="${dir.lib}/rome_0.9.jar" excludes="${includes.unqualified}" prefix="rome" />
			<zipfileset src="${dir.lib}/saaj.jar" excludes="${includes.unqualified}" prefix="saaj" />
			<zipfileset src="${dir.lib}/serializer_from_xerces_2.9.0.jar" excludes="${includes.unqualified}" prefix="serializer" />
			<zipfileset src="${dir.lib}/servlet-api_2.5-6.0.1.jar" excludes="${includes.unqualified}" prefix="servlet-api" />
			<zipfileset src="${dir.lib}/stax-api_1.0.1.jar" excludes="${includes.unqualified}" prefix="stax-api" />
			<zipfileset src="${dir.lib}/velocity_1.4.jar" excludes="${includes.unqualified}" prefix="velocity" />
			<zipfileset src="${dir.lib}/wife.jar" excludes="${includes.unqualified} countries.properties currencies.properties" prefix="wife"/>
			<zipfileset src="${dir.lib}/wsdl4j_1.6.2.jar" excludes="${includes.unqualified}" prefix="wsdl4j" />
			<zipfileset src="${dir.lib}/wstx-asl_3.0.1.jar" excludes="${includes.unqualified}" prefix="wstx-asl" />
			<zipfileset src="${dir.lib}/xercesImpl_2.9.0.jar" excludes="${includes.unqualified}" prefix="xercesImpl" />
			<zipfileset src="${dir.lib}/xfire-all_1.2.6.jar" excludes="${includes.unqualified}" prefix="xfire-all" />
			<zipfileset src="${dir.lib}/xml-apis_from_xerces_2.9.0.jar" excludes="${includes.unqualified}" prefix="xml-apis" />
			<zipfileset src="${dir.lib}/xstream-1.2.1.jar" excludes="${includes.unqualified}" prefix="xstream" />
			<zipfileset src="${dir.lib}/script.jar" excludes="${includes.unqualified}" prefix="script" />
			<zipfileset src="${dir.spring.lib}/spring-core.jar" excludes="${includes.unqualified}" prefix="spring-core" />
			<zipfileset src="${dir.spring.lib}/spring.jar" excludes="${includes.unqualified}" prefix="spring" />
      <zipfileset src="${dir.lib}/neethi-3.0.3.jar" excludes="${includes.unqualified}" prefix="neethi"/>
		</jar>
	</target>

	<target name="jars" depends="jars.compiled,jar.depends,src.jar,src.jar.suppressed" description="Assemble all jars" />

	<target name="package.init" depends="init,clean.package" description="Initialisation of directories etc. for packaging build">
		<echo level="info" message="Initialising package area ${dir.package}" />
		<property name="dir.package.lib" value="${dir.package}/lib" />
		<property name="dir.package.example" value="${dir.package}/example" />
		<property name="dir.package.faq" value="${dir.package}" />
		<property name="dir.package.sql" value="${dir.package}/sql" />
		<property name="dir.package.javadocs" value="${dir.package}/javadocs" />
		<property name="dir.package.licences" value="${dir.package}/licences" />
		<property name="dir.package.lib.3rdparty" value="${dir.package.lib}/opt" />
		<property name="dir.package.lib.ext" value="${dir.package.lib}/ext" />
		<mkdir dir="${dir.package.lib}" />
		<mkdir dir="${dir.package.lib.3rdparty}" /> 
		<mkdir dir="${dir.package.lib.ext}" />
		<mkdir dir="${dir.package.example}" />
		<mkdir dir="${dir.package.sql}" />
		<mkdir dir="${dir.package.javadocs}" />
		<mkdir dir="${dir.package.licences}" />
	</target>
	
	<target name="package" depends="jars,javadocs,package.init,javadocs.suppressed,copyright.validate,example.doc,example.doc.suppressed" description="Create openadaptor package">
		<echo level="info" message="creating package in ${dir.package}" />

		<echo level="info" message="Copying openadaptor jars from ${dir.build.lib}" />
		<copy todir="${dir.package.lib}">
			<fileset dir="${dir.build.lib}" includes="*.jar,*.zip" excludes="bootstrap.jar,openadaptor-stub.jar" />
		</copy>

		<echo level="info" message="Copying 3rd party jars from ${dir.lib},${dir.spring.lib},${dir.test.lib} to ${dir.package.lib.3rdparty}" />
		<copy todir="${dir.package.lib.3rdparty}">
			<fileset dir="${dir.lib}" includes="*.jar,*.zip" />
			<fileset dir="${dir.spring.lib}" includes="*.jar,*.zip" />
			<fileset dir="${dir.test.lib}" includes="hsqldb.jar"/>
		</copy>
	
		<echo level="info" message="Copying registration.properties" />
		<copy todir="${dir.package.lib}" file="${dir.src}/registration.properties" />
		
		<echo level="info" message="Copying log4j.properties" />
		<copy todir="${dir.package.lib}" file="${dir.lib}/log4j.properties" />

		<echo level="info" message="Copying javadocs from ${dir.build.javadocs}" />
		<copy todir="${dir.package.javadocs}">
			<fileset dir="${dir.build.javadocs}" />
		</copy>

		<echo level="info" message="Copying release notes ${basedir}/ReleaseNotes.txt" />
		<copy todir="${dir.package}" file="${basedir}/ReleaseNotes.txt" />

		<echo level="info" message="Copying Licence file ${licence.file}" />
		<copy todir="${dir.package}" file="${licence.file}" />
		
		<echo level="info" message="Copying 3rd party licences to ${dir.package.licences}"/>
		<copy todir="${dir.package.licences}">
			<fileset dir="${licence.3rdparty.dir}"/>
		</copy>

		<echo level="info" message="Copying Examples from ${dir.example} and ${dir.build.example}" />
		<copy todir="${dir.package.example}">
			<fileset dir="${dir.example}" />
			<fileset dir="${dir.build.example}" />
		</copy>
		<echo level="info" message="Copying example log4j.propertes to ${dir.package.example}/tutorial" />
		<copy todir="${dir.package.example}/tutorial" file="${dir.example}/log4j.properties" />

		<echo level="info" message="Copying FAQ from ${dir.faq}" />
		<copy todir="${dir.package.faq}">
			<fileset dir="${dir.faq}" includes="FAQ.html" />
		</copy>

		<echo level="info" message="Copying SQL from ${dir.sql}" />
		<copy todir="${dir.package.sql}">
			<fileset dir="${dir.sql}" />
		</copy>
	</target>

	<target name="skip.test.and.springcheck" description="No need to test and spring check if test.package is doing it">
		<echo level="info" message="disabling tests and springcheck (if not explicitly requested) - test.package will do them"/>
		<property name="suppress.tests" value="set"/>
		<property name="suppress.springcheck" value="set"/>
	</target>
	
  <target name="test.package" depends="skip.test.and.springcheck,package" description="run all tests against packaged build in ${dir.package}">
  	<!--
  	  The test src paths are currently required, as some of the tests load resources from these areas using the
  	  classpath.
  	  Also need to explicitly include mail.jar and activation.jar. We need to investigate why these are not
  	  part of openadaptor-depends.jar!
  	  Need ${dir.build.stub.classes} to allow springcheck of examples which leverage legacy openadaptor.
  	 -->
		<path id="classpath.package.test">
			<pathelement path="${dir.package.lib}" />
			<pathelement path="${dir.package.lib}/openadaptor.jar" />
			<pathelement path="${dir.package.lib}/openadaptor-depends.jar" />
			<pathelement path="${dir.package.lib}/openadaptor-spring.jar" />
			<pathelement path="${dir.package.lib.3rdparty}/mail.jar"/>
			<pathelement path="${dir.package.lib.3rdparty}/activation.jar"/>
			<pathelement path="${dir.build.test.classes}" />
			<fileset dir="${dir.test.lib}" includes="**/*.jar,**/*.zip" />
			<pathelement path="${dir.test.src.unit}" />
			<pathelement path="${dir.test.src.integration}" />
			<pathelement path="${dir.test.src.system}" />
			<pathelement path="${dir.build.stub.classes}"/>
		</path>

    <echo level="info" message="Invoking test.unit.system.integration on package in ${dir.package}"/>
    <ant antfile="build.xml" target="test.unit.system.integration" inheritAll="false">
      <reference refid="classpath.package.test" torefid="classpath.test"/>
    </ant>

    <echo level="info" message="Invoking test.spring.examples on package in ${dir.package}"/>
    <ant antfile="build.xml" target="test.spring.examples" inheritAll="false">
    	<property name="dir.example" value="${dir.package.example}" />
    </ant>
  </target>

	
	<target name="zip" depends="test.package" description="Create a zip file with packaged build">
		<property name="oa.zip.prefix" value="openadaptor-${tag}" />
		<property name="oa.zip.file" value="${dir.build}/${oa.zip.prefix}-bin.zip" />
		<echo level="info" message="Creating zip file: ${dir.package} -> ${oa.zip.file} " />
		<zip destfile="${oa.zip.file}">
			<zipfileset dir="${dir.package}" prefix="${oa.zip.prefix}" />
		</zip>
	</target>

	<!-- Clean tasks -->
	<target name="clean.package" depends="init" description="Clean package area ${dir.package}">
		<delete dir="${dir.package}" />
	</target>

	<target name="clean.build" depends="init" description="Clean build area ${dir.build}">
		<delete dir="${dir.build}" />
	</target>

	<target name="clean.build.test" depends="init" description="Clean build area ${dir.build.test}">
		<delete dir="${dir.build.test}" />
	</target>

	<target name="clean.build.example" depends="init" description="Clean build example area ${dir.build.example}}">
		<delete dir="${dir.build.example}" />
	</target>

	<target name="clean" depends="clean.package,clean.build" description="Clean build and package areas" />

	<target name="upload" depends="init.support.tasks,zip" description="Upload packaged build to hosted website" if="upload.project.url">
    <!-- Note that for large uploads, the ant java process may need to have it's memory size increased -->
		<!-- Set file path & description (if not already set) -->
		<property name="upload.file.path" value="${oa.zip.file}"/>
		<property name="upload.file.description" value="Automated build ${build.timestamp} - TEST ONLY"/>
		<echo level="info" message="Uploading ${oa.zip.file} via ${upload.project.url}. This may take some time"/>
		<upload
			filepath="${upload.file.path}"
			description="${upload.file.description}"
			overwrite="true" 
			projecturl="${upload.project.url}"
			proxyhost="${upload.proxy.host}"
			proxyport="${upload.proxy.port}"
			username="${upload.username}"
		  password="${upload.password}"
		/>
	</target>
	
	<!-- Cruise tasks for use by continuous builds -->
	<target name="cruise" depends="clean,zip,upload" description="Cruise target for openadaptor build" />
</project>
