<?xml version="1.0" ?>

<!--
#* [[
#* Copyright (C) 2005-2009 The Software Conservancy as Trustee. All rights
#* reserved.
#*
#* Permission is hereby granted, free of charge, to any person obtaining a
#* copy of this software and associated documentation files (the
#* "Software"), to deal in the Software without restriction, including
#* without limitation the rights to use, copy, modify, merge, publish,
#* distribute, sublicense, and/or sell copies of the Software, and to
#* permit persons to whom the Software is furnished to do so, subject to
#* the following conditions:
#*
#* The above copyright notice and this permission notice shall be included
#* in all copies or substantial portions of the Software.
#*
#* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#*
#* Nothing in this notice shall be deemed to grant any rights to
#* trademarks, copyrights, patents, trade secrets or any other intellectual
#* property of the licensor or any contributor except as expressly stated
#* herein. No patent license is granted separate from the Software, for
#* code that you delete from the Software, or for combinations of the
#* Software with other software or hardware.
#* ]]
-->

<project name="openadaptor-examples-docs" default="docs">
	<!-- Don't know if we need this.
	<target name="${basedir}/package/example/docs" />
  -->
	
	<target name="init" description="Initialise paths">
		<echo level="info" message="Initialising" />

		<!-- Pick up global properties first ... -->
		<property name="dir.input" value="${docgen.input.dir}"/>
		<property name="dir.output" value="${docgen.output.dir}"/>
		<property name="dir.output.images" value="${docgen.output.dir}"/>
		<property name="dir.tools" value="${docgen.bin}"/>
		<property name="dir.xsl" value="${dir.tools}/xsl"/>

		<!-- if tag is not 'trunk' set relative path to 'tags/<tagname>' instead of just 'trunk' -->
		<condition property="examples.relative.basename" value="tags/${tag}">
			<not>
				<equals arg1="${tag}" arg2="trunk" />
			</not>
		</condition>
		<!-- set relative path to tag (only if previous condition hasn't already done so -->
		<property name="examples.relative.basename" value="${tag}" />
		<echo level="info" message="Relative path for examples is: ${examples.relative.basename}" />

		<!-- Set patterns for matching file headers -->
		<property name="filecomment.path.pattern1" value="HeadURL: https://www.openadaptor.org/svn/openadaptor3/${examples.relative.basename}/example/" />
		<property name="filecomment.path.pattern2" value="HeadURL: https://openadaptor3.openadaptor.org/svn/openadaptor3/${examples.relative.basename}/example/" />
		<property name="filecomment.path.pattern3" value="this pattern will not be found" />
		<property name="filecomment.path.pattern4" value="this pattern will not be found" />

		<!-- old version information - didn't work as oa3 version stuff wasn't set afaik 
  	<property name="oaVersion" value="${docgen.project.name} version ${oa3.version.major} ${oa3.version.minor} build ${build.number}" />
		-->
		<property name="oaVersion" value="${docgen.project.name} ${tag} ${DSTAMP}:${TSTAMP}" />

		<echo level="info" message="Input from: ${dir.input}" />
		<echo level="info" message=" Output to: ${dir.output}" />
		<echo level="info" message=" Images to: ${dir.output.images}" />
		<echo level="info" message=" Tools dir: ${dir.tools}" />
		<echo level="info" message="" />

		<!-- find expected path to graphviz utility for generating dot files -->
		<property file="docs.properties"/>
		<!-- Where to find XSL Transforms, Schemas, DTDs -->

		<!-- Include all of the XML example files, except the ones that are not Spring XML config: -->
		<patternset id="example.xml.config.files">
			<include name="spring/**/*.xml" />
			<include name="tutorial/**/*.xml" />
			<exclude name="**/input/*.xml" />
			<exclude name="**/output/*.xml" />
			<exclude name="**/spring/client/*.xml" />
			<exclude name="**/spring/connectors/db/jee/jboss/*.xml" />
		</patternset>

		<!-- Where to find the schema files: -->
		<xmlcatalog id="oa3XmlCatalog">
			<entity publicId="adaptorDoc.xsl" location="${dir.xsl}/adaptorDoc.xsl" />
			<dtd publicId="-//SPRING//DTD BEAN 2.0//EN" location="${dir.xsl}/spring-beans-2.0.dtd" />
			<entity publicId="http://www.springframework.org/schema/beans" location="${dir.xsl}/spring-beans-2.0.xsd" />
		</xmlcatalog>
	
	</target>


	<target name="docs_prepare" depends="init">
		<!-- Start with clean cookbook and tutorial generated docs/images directories: -->
		<mkdir dir="${dir.output}" />
		<mkdir dir="${dir.output.images}" />
		<delete>
			<fileset dir="${dir.output.images}" includes="**/*,*" />
			<fileset dir="${dir.output}" includes="**/*,*" />
		</delete>
		<mkdir dir="${dir.output}" />
		<mkdir dir="${dir.output.images}" />

		<!-- Try various paths for graphviz 'dot' executable -->
    <available file="${graphviz.dot.windows}" property="graphviz.dot" value="${graphviz.dot.windows}"/>
	  <available file="${graphviz.dot.linux}" property="graphviz.dot" value="${graphviz.dot.linux}"/>
	  <available file="${graphviz.dot.unix}" property="graphviz.dot" value="${graphviz.dot.unix}"/>
	  <available file="${graphviz.dot.mac}" property="graphviz.dot" value="${graphviz.dot.mac}"/>
		<echo level="info" message="'dot' executable is ${graphviz.dot}" />		
	</target>


	<target name="docs_images" depends="docs_prepare" if="graphviz.dot" description="Generates the project Cookbook (including index pages)">
		<echo level="info" message="Generating dot notation files ${dir.input} -> ${dir.output.images}" />
 
		<!-- Generate GraphViz dot notation file using XSLT for each cookbook example -->
		<xslt basedir="${dir.input}" destdir="${dir.output.images}" style="${dir.xsl}/oa3toDot.xsl">
			<patternset refid="example.xml.config.files" />
			<param name="oaVersion" expression="${oaVersion}" />
			<!-- Workaround so XSLT can find out name of file including relative path: (must have trailing slash) -->
			<!-- <param name="filepathGlobPrefix1" expression="HeadURL: https://www.openadaptor.org/svn/openadaptor3/${examples.relative.basename}/example/" /> -->
			<!-- <param name="filepathGlobPrefix2" expression="HeadURL: https://openadaptor3.openadaptor.org/svn/openadaptor3/${examples.relative.basename}/example/" /> -->
			<param name="filepathGlobPrefix1" expression="${filecomment.path.pattern1}" />
			<param name="filepathGlobPrefix2" expression="${filecomment.path.pattern2}" />
			<param name="filepathGlobPrefix3" expression="${filecomment.path.pattern3}" />
			<param name="filepathGlobPrefix4" expression="${filecomment.path.pattern4}" />
			<xmlcatalog refid="oa3XmlCatalog" />
			<mapper type="glob" from="*.xml" to="*.dot" />
		</xslt>


		<!-- Generate GIF for each cookbook example from GraphViz dot notation file -->
		<!-- Windows, Unix/Linux, Mac binaries and source code: http://www.graphviz.org/Download.php -->
		<mapper id="outImage" type="glob" from="*.dot" to="${dir.output.images}/*.${graphviz.image.fileextension}" />

		<echo level="info" message="Using ${graphviz.dot} to generate images (*.${graphviz.image.fileextension})" />
		<apply executable="${graphviz.dot}" dest="${dir.output.images}" failifexecutionfails="false">
			<arg value="-T${graphviz.image.fileextension}" />
			<srcfile />
			<fileset dir="${dir.output.images}" includes="**/*.dot" />
			<mapper refid="outImage" />
			<redirector>
				<outputmapper refid="outImage" />
			</redirector>
		</apply>


		<!-- Generate image map for each cookbook example from GraphViz dot notation file -->
		<!-- Windows, Unix/Linux, Mac binaries and source code: http://www.graphviz.org/Download.php -->
		<mapper id="outCmap" type="glob" from="*.dot" to="${dir.output.images}/*.map" />

		<echo level="info" message="Using ${graphviz.dot} to generate image maps" />
		<apply executable="${graphviz.dot}" dest="${dir.output.images}" failifexecutionfails="false">
			<arg value="-Tcmapx" />
			<srcfile />
			<fileset dir="${dir.output.images}" includes="**/*.dot" />
			<mapper refid="outCmap" />
			<redirector>
				<outputmapper refid="outCmap" />
			</redirector>
		</apply>

		<!-- Clean up the generated dot files at this point -->
		<delete>
			<fileset dir="${dir.output.images}" includes="**/*.dot" />
		</delete>

		<!-- Generate html page using XSLT for each cookbook example -->
		<xslt basedir="${dir.input}" destdir="${dir.output}" style="${dir.xsl}/beans.xsl">
			<patternset refid="example.xml.config.files" />

			<param name="oaVersion" expression="${oaVersion}" />
			<param name="imageFileExtension" expression="${graphviz.image.fileextension}" />
			<!-- Workaround so XSLT can find out name of file including relative path: (must have trailing slash) -->
			<param name="filepathGlobPrefix1" expression="${filecomment.path.pattern1}" />
			<param name="filepathGlobPrefix2" expression="${filecomment.path.pattern2}" />
			<param name="filepathGlobPrefix3" expression="${filecomment.path.pattern3}" />
			<param name="filepathGlobPrefix4" expression="${filecomment.path.pattern4}" />
			<param name="showJavaDocLinks" expression="true" />
			<param name="showConfigIndexLinks" expression="true" />
			<param name="docgenInputDir" expression="${docgen.output.dir}/"/>
			<!-- JavaDoc relative path or an http(s) URL: (must have trailing slash) -->
			<!-- <param name="javaDocPath" expression="https://myserver.mydomain/javadocs/" /> -->
			
			<xmlcatalog refid="oa3XmlCatalog" />
			<mapper type="glob" from="*.xml" to="*.html" />
		</xslt>

	</target>

	<!-- Generates the project Cookbook (including index pages) -->
	<target name="docs" depends="docs_images" description="Generate the documentation">

		<echo level="info" message="Index generation; temporarily combining examples into ${dir.output}/cookbook_combined.xml"/>
		<!-- Combine all cookbook examples into a single file (so we can later generate index) -->
		<concat destfile="${dir.output}/cookbook_combined.xml" fixlastline="yes">
			<fileset dir="${dir.input}">
				<patternset refid="example.xml.config.files" />
			</fileset>
			<filterchain>
				<tokenfilter>
					<!-- Apply regexps to whole of input file at once: -->
					<filetokenizer />
					<!--
						Here we change the beans namespace to a dummy one - otherwise the xsl transforms
            don't match on 'beans' elements. Other namespaces e.g. xmlns:util will be preserved
            unmodified
					  -->
					<replaceregex pattern="(xmlns=)" flags="sg" replace="xmlns:dummy=" />
					
					<!--
             Pull the name of each cookbook example out of its CVS Header comment,
             and add as "id" attribute to its "beans" element (preserving schema namespace attributes):
           -->				
					<replaceregex pattern="(${filecomment.path.pattern1})([^.]+?)(\.xml .*?&lt;beans)([^&gt;]*)&gt;" flags="sg" replace="\1\2\3 id=&quot;\2&quot; \4&gt;" />
					<replaceregex pattern="(${filecomment.path.pattern2})([^.]+?)(\.xml .*?&lt;beans)([^&gt;]*)&gt;" flags="sg" replace="\1\2\3 id=&quot;\2&quot; \4&gt;" />
					<replaceregex pattern="(${filecomment.path.pattern3})([^.]+?)(\.xml .*?&lt;beans)([^&gt;]*)&gt;" flags="sg" replace="\1\2\3 id=&quot;\2&quot; \4&gt;" />
					<replaceregex pattern="(${filecomment.path.pattern4})([^.]+?)(\.xml .*?&lt;beans)([^&gt;]*)&gt;" flags="sg" replace="\1\2\3 id=&quot;\2&quot; \4&gt;" />
	
					<!-- Cope (dumbly) with up to 3 underscores in bean relative path filename (map to minus sign): -->
					<replaceregex pattern="(beans id=&quot;[^&quot;_]*?)_([^&quot;]*?&quot;)" flags="sg" replace="\1-\2" />
					<replaceregex pattern="(beans id=&quot;[^&quot;_]*?)_([^&quot;]*?&quot;)" flags="sg" replace="\1-\2" />
					<replaceregex pattern="(beans id=&quot;[^&quot;_]*?)_([^&quot;]*?&quot;)" flags="sg" replace="\1-\2" />
					<!-- Cope (dumbly) with up to 7 levels of directory nesting: -->
					<replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
					<replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
					<replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
					<replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
					<replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
					<replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
					<replaceregex pattern="(beans id=&quot;[^&quot;/]*?)/([^&quot;]*?&quot;)" flags="sg" replace="\1_\2" />
					<!-- Strip out the first two lines of every cookbook example (as inappropriate): -->
					<replaceregex pattern="&lt;\?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;\?&gt;" flags="g" replace="" />
					<replaceregex pattern="&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;" flags="g" replace="" />
					<!-- Add xml version declaration back once at top of file, and open cookbook element: -->
					<replaceregex pattern="^" flags="m" replace="&lt;\?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;\?&gt;
						&lt;cookbook&gt;" />
					<!-- Close cookbook element at end of file: -->
					<replaceregex pattern="$" flags="s" replace="&lt;/cookbook&gt;" />
				</tokenfilter>
			</filterchain>
		</concat>

    <echo level="info" message="Modifying imagemaps to use relative paths (*.map -> *.localmap)"/>
		<!-- Filter as we copy the files: -->
		<mkdir dir="${dir.output.images}" />
		<copy todir="${dir.output.images}" overwrite="true" failonerror="true" flatten="false">
			<fileset dir="${dir.output.images}" includes="**/*.map" />
			<mapper type="glob" from="*.map" to="*.localmap" />
			<filterchain>
				<tokenfilter>
					<!-- Replace the HREF relative path with "../" (because map was originally built for use deep in images tree): -->
					<replaceregex pattern="( href=&quot;)[./]+([^./][^&quot;])" flags="sg" replace="\1./\2" />
				</tokenfilter>
			</filterchain>
		</copy>


		<!-- Generate html page using XSLT: mapping cookbook examples to beans -->
		<echo level="info" message="Generating config2beans.html"/>
		<xslt basedir="${dir.output}" destdir="${dir.output}" includes="cookbook_combined.xml" 
			style="${dir.xsl}/cookbook2beans.xsl">
			<param name="oaVersion" expression="${oaVersion}" />
			<xmlcatalog refid="oa3XmlCatalog" />
			<mapper type="glob" from="cookbook_combined.xml" to="config2beans.html" />
		</xslt>

		<!-- Generate html page using XSLT: mapping beans to cookbook examples -->
		<echo level="info" message="Generating beans2config.html"/>
		<xslt basedir="${dir.output}" destdir="${dir.output}" includes="cookbook_combined.xml" 
			style="${dir.xsl}/beans2cookbook.xsl">
			<param name="oaVersion" expression="${oaVersion}" />
			<xmlcatalog refid="oa3XmlCatalog" />
			<mapper type="glob" from="cookbook_combined.xml" to="beans2config.html" />
		</xslt>

		<!-- Generate html image page using XSLT: containing node maps for all cookbook examples -->
		<echo level="info" message="Generating allimages.html"/>
  	<xslt basedir="${dir.output}" destdir="${dir.output.images}" includes="cookbook_combined.xml" 
			style="${dir.xsl}/allnodemaps.xsl">
			<param name="oaVersion" expression="${oaVersion}" />
			<param name="imageFileExtension" expression="${graphviz.image.fileextension}" />
			<param name="docgenInputDir" expression="${docgen.output.dir}/"/>
			<xmlcatalog refid="oa3XmlCatalog" />
			<mapper type="glob" from="cookbook_combined.xml" to="allimages.html" />
		</xslt>

		<!-- Generate main index.html page using XSLT: containing summary of cookbook information -->
		<echo level="info" message="Generating top level index - index.html "/>
		<xslt basedir="${dir.output}" destdir="${dir.output}" includes="cookbook_combined.xml" 
			style="${dir.xsl}/index.xsl">
			<param name="oaVersion" expression="${oaVersion}" />
			<xmlcatalog refid="oa3XmlCatalog" />
			<mapper type="glob" from="cookbook_combined.xml" to="index.html" />
		</xslt>

		<!-- Tidy up temporary XML file used for index generation -->
		<delete file="${dir.output}/cookbook_combined.xml" />		
		<!-- Clean up the generated map files at this point -->
		<delete>
			<fileset dir="${dir.output.images}" includes="**/*.map" />
			<fileset dir="${dir.output.images}" includes="**/*.localmap" />
		</delete>

	</target>
</project>