<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  $Id: metrics.xml 1880 2008-11-24 13:46:01Z lachork $
  $HeadURL: https://openadaptor3.openadaptor.org/svn/openadaptor3/tags/3.4.8/example/spring/adaptor/metrics.xml $
 --> 
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
  <description><![CDATA[  
  
  Illustrates how to:
    * enable adaptors metrics
    * view metrics via a JMX console 
    * print metrics to an external resource, such as the log file. 
  
  The adaptor does the following:
    * reads delimited records from file
    * stops processing in an 'inspector' and waits for a user action 
      (to introduce delay). Graphical environment/X server necessary.
    * converts delimited data into a map
    * converts map to xml
    * writes to the console
    * uses a console based exception processor
    * exposes JMX interface  
  
Run it like this...

    java [-Dcom.sun.management.jmxremote] org.openadaptor.spring.SpringAdaptor -config metrics.xml

  You need the following in your classpath

    lib
    lib/openadaptor.jar
    lib/openadaptor-spring.jar
    lib/openadaptor-depends.jar

  This example specifies the MBeanServer bean that comes with openadaptor (uses the sun 
  reference implementation and automatically runs a http adaptor which you can browse 
  at http://localhost:8082).
  
  The optional vm argument -Dcom.sun.management.jmxremote will also permit the adaptor to be monitored
  locally via jconsole (1.5+).
  
  Once the adaptor is running open at watch the JMX console (http://localhost:8082), best either 
  the Adaptor bean or the individual components in the pipeline (their metrics are named 
  <component_name>-metrics).
  
  The 3rd input message has incorrectly formatted to cause (and show in metrics) an exception. 
  
  Watch log/console output when the adaptor exits, adaptor-level metrics will be printed.
   
  Change the metricsPrinter property on the Adaptor to allMetricsPrinter, re-run the adaptor.  
  ]]></description>
  
  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
    <description>
	   Adaptor's metrics recording is switched on via the 'metricsEnabled' property
	   on the associated Router (Adaptor inherits Router's metrics settings).
	   
	   Metrics, if enabled, can be viewed via a JMX console at the runtime, or
	   printed at the end of adaptor's run (or both). To view via JMX console
	   the MBeanServer has to be defined as below. To print to the logs/the console
	   etc, the 'metricsPrinter' property on the Adaptor has to be set.
	   Custom metrics printers can be defined.
	</description>
	<property name="messageProcessor">
		<bean class="org.openadaptor.core.router.Router">
			<description>
				This creates the simple pipeline reader -> inspector ->
				mapConverter -> xmlConvertor -> writer.
			</description>
			<property name="processors">
				<list>
					<ref bean="reader" />
					<ref bean="inspector" />
					<ref bean="mapConverter" />
					<ref bean="xmlConverter" />
					<ref bean="consoleWriter" />
				</list>
			</property>
			<property name="exceptionProcessor" ref="exceptionConsoleWriter"/>
		    <property name="metricsEnabled" value="true"/>
		</bean>
	</property>
	<property name="metricsPrinter" ref="adaptorMetricsPrinter"/>
    <!-- property name="metricsPrinter" ref="allMetricsPrinter"/-->
  </bean>
  
  <bean id="reader" class="org.openadaptor.auxil.connector.iostream.reader.FileReadConnector">
	<description>
		This read connector reads lines from a file.
	</description>
	<property name="filename" value="input/metrics.txt" />
	<property name="dataReader">
		<bean
			class="org.openadaptor.auxil.connector.iostream.reader.string.LineReader">
			<description>
				This (regular expression) will exclude comments
				(lines beginning with #)
			</description>
			<property name="excludeRegex" value="^#.*" />
		</bean>
	</property>
  </bean>
	
  <bean class="org.openadaptor.core.jmx.MBeanServer">
    <description>Embed this in your config to expose jmx interface via http and rmi.</description>
    <property name="port" value="8082"/>
  </bean>
  
  <bean id="inspector" class="org.openadaptor.auxil.processor.script.ScriptProcessor">
	 <property name="script">
	  <value>
	  importPackage(Packages.javax.swing);
	  var log =Packages.org.apache.commons.logging.LogFactory.getLog("dom4j->w3c");
      log.info("Delaying message. JOptionPane should pop up. Click OK. Watch JMX console (Adaptor or inspector-metrics).");
	  JOptionPane.showMessageDialog(null,oa_data,"delays message. Just click OK",JOptionPane.PLAIN_MESSAGE);
	  </value>
	 </property>
  </bean>
  
  <bean id="mapConverter" class="org.openadaptor.auxil.convertor.delimited.DelimitedStringToOrderedMapConvertor">
	<description>
	  Strings are delimited by commas; each value in the string will be associated with the
		corresponding 'name' in the generated map
	</description>
	<property name="delimiter" value="," />
	<property name="fieldNames">
		<list>
			<value>Side</value>
			<value>Qty</value>
			<value>SecurityId</value>
			<value>Counterparty</value>
			<value>Price</value>
		</list>
	</property>
  </bean>
	
  <bean id="xmlConverter" class="org.openadaptor.auxil.convertor.xml.OrderedMapToXmlConvertor">
	<description>Convert the map into XML</description>
	<property name="rootElementTag" value="record" />
  </bean>
	
  <bean id="consoleWriter" class="org.openadaptor.auxil.connector.iostream.writer.FileWriteConnector"/>
	
  <bean id="exceptionConsoleWriter" class="org.openadaptor.auxil.connector.iostream.writer.FileWriteConnector"/>
  	
  <bean id="adaptorMetricsPrinter" class="org.openadaptor.auxil.metrics.Log4JSingleMetricsPrinter">
    <description>
	  Prints adaptor's metrics to the log4j logger.
	  To define your own way of printing/handling metrics implement the
	  org.openadaptor.core.recordable.IMetricsPrinter interface.
	</description>
  </bean>
 
  <bean id="allMetricsPrinter" class="org.openadaptor.auxil.metrics.Log4JAggregateMetricsPrinter">
    <description>
	  Prints all metrics (the adaptor's and all its recordable components) to the log4j logger.
	  To define your own way of printing/handling metrics implement the
	  org.openadaptor.core.recordable.IMetricsPrinter interface.
	</description>
  </bean>
  
</beans>