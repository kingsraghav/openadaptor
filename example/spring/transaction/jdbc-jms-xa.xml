<?xml version="1.0" encoding="UTF-8"?>
<!--
  $Id: jdbc-jms-xa.xml 1918 2009-01-28 13:51:41Z kscully $
  $HeadURL: https://openadaptor3.openadaptor.org/svn/openadaptor3/tags/3.4.9/example/spring/transaction/jdbc-jms-xa.xml $
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

<description><![CDATA[
    This adaptor does the following...

      * configures a JTA Transaction Manager for the Router
      * configures the connectors to participate in the jta transaction
      * selects data from a MySQL db using a query
      * converts the result set to XML
      * writes data to a JMS Topic.
    
    It is designed to illustrate the basic structure of an adaptor that uses
    an XA transaction manager to distribute a transaction across multiple
    connectors.

    The database used is expected to support xa transactions.

    Note the sql run by the JDBCReadConnector below should be reworked as
    necessary to match whatever example tables you are using.

    Run it like this...
    
      java org.openadaptor.spring.SpringAdaptor -config jdbcjmsXA.xml -props ../../config/transaction-examples-*.properties
    
    You need the following in your classpath
  
      lib
      lib/openadaptor.jar
      lib/openadaptor-spring.jar
      lib/openadaptor-depends.jar
      (ensure you also include the MySQL Drivers and relevant JMS Client jars)

 ]]></description>
  
  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
    <property name="transactionManager" ref="TransactionManager"/>
    <property name="messageProcessor" ref="Router"/>
  </bean>
  
  <bean id="Router" class="org.openadaptor.core.router.Router">
    <property name="processors">
      <list>
        <ref bean="Reader"/>
        <ref bean="Writer"/>
      </list>
    </property>
  </bean>
  
  <!-- JTA transaction manager -->
  <bean name="TransactionManager" class="org.openadaptor.core.transaction.jta.JtaTransactionManager"/>
  
  <!-- MySQL XADataSource -->
  <!-- Please uncomment below to use. Currently doesn't pass the spring check because of the MySql reference -->
  <!--
  <bean name="XADataSource" class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource">
    <property name="serverName" value="${mysql.serverName}"/>
    <property name="port" value="${mysql.port}"/>
    <property name="databaseName" value="${mysql.databaseName}"/>
    <property name="user" value="${mysql.user}"/>
    <property name="password" value="${mysql.password}"/>
  </bean>
  -->
  <!-- This defines jdbc connection -->
  <!-- Note the important property is "transacted". This defaults to false. -->
  <bean id="JdbcConnection" class="org.openadaptor.auxil.connector.jdbc.JDBCConnection">
    <!--
    <property name="xaDataSource" ref="XADataSource"/>
    -->
    <property name="transacted" value="true"/>
  </bean>
  
  <!-- Reader which polls database using configured SQL -->
  <bean id="Reader" class="org.openadaptor.auxil.connector.jdbc.reader.JDBCReadConnector">
    <property name="jdbcConnection" ref="JdbcConnection"/>
    <property name="resultSetConverter">
      <bean class="org.openadaptor.auxil.connector.jdbc.reader.xml.ResultSetToXMLConverter"/>
    </property>
    <!-- You can adjust this sql to match whatever example tables you have set up -->
    <property name="sql">
      <value>select username,fullname,uniqueid,dateadded from oa3_pythons order by uniqueid</value>
    </property>
  </bean>


  <!-- These JNDI properties are for use by the JMS Writer -->
  <bean id="JndiConnection" class="org.openadaptor.auxil.connector.jndi.JNDIConnection">
    <description>
      This defines jndi connection, from which we get jms connection.
    </description>
    <property name="initialContextFactory" value="${jndi.initialContextFactory}"/>
    <property name="providerUrl" value="${jndi.providerUrl}"/>
    <property name="securityPrincipal" value="${jndi.securityPrincipal}"/>
    <property name="securityCredentials" value="${jndi.securityCredentials}"/>
  </bean>

  <!-- The JMS Connection for the JMS Writer -->
  <bean id="JmsConnection" class="org.openadaptor.auxil.connector.jms.JMSConnection">
    <description>jms connection for queue we wish to publish to.</description>
    <property name="jndiConnection" ref="JndiConnection"/>
    <property name="connectionFactoryName" value="${jms.xatp.connectionFactoryName}"/>
    <property name="username" value="${jms.username}"/>
    <property name="password" value="${jms.password}"/>
    <!-- useXa must be set true otherwise the connection overrides the use of xa transactions -->
    <property name="useXa" value="true"/>
  </bean>

  <!--
    The JMS Writer. Note that we have to set 'transacted' to true in spite
    of configuring an XA capable connection via the ConnectionFactory.
    -->
  <bean id="Writer" class="org.openadaptor.auxil.connector.jms.JMSWriteConnector">
    <description>writer that publishes data onto a queue.</description>
    <property name="destinationName" value="${jms.t.destinationName}"/>
    <property name="jmsConnection" ref="JmsConnection"/>
    <property name="transacted" value="true"/>
  </bean>
</beans>