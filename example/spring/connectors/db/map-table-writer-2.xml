<?xml version="1.0" encoding="UTF-8"?>
<!--
  $Id: map-table-writer-2.xml 2193 2016-12-16 14:42:32Z fschlier $
  $HeadURL: https://openadaptor3.openadaptor.org/svn/openadaptor3/tags/3.4.8/example/spring/connectors/db/map-table-writer-2.xml $
 -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
 <description>
  <![CDATA[    
  
  This adaptor does the following...
    
    * reads data from stdin
    * converts it into an ordered map
    * writes the data via an insert statement
    
  It is designed to illustrate the basic structure of an adaptor that writes to a database.
  
  This example also demostrates the use of the excludeColumns property.
  If the table "PARTY" being written to was created with a GENERATED ALWAYS column:
  CREATE TABLE PARTY(ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,PARTYID INTEGER NOT NULL,SHORTCODE VARCHAR(16) NOT NULL,LONGNAME VARCHAR(64))
  
  The the generatedd statement will look like this:
  Generated Prepared stmt: INSERT INTO "PARTY"("ID","PARTYID","SHORTCODE","LONGNAME") VALUES (?,?,?,?)
  but as you cannot supply a value (even null) for the ID column any attempt to execute the insert will result in an exception.
  
  Using the property excludeColumn we can exclude any columns that we do not want to be part of the generated insert statement, so:
    <property name="excludeColumns">
    	<list>
    		<value>ID</value>
    	</list>
    </property>
    
  will cause the generated statement to now be:
  Generated Prepared stmt: INSERT INTO "PARTY"("PARTYID","SHORTCODE","LONGNAME") VALUES (?,?,?)
  which will now work.
  

  Run it like this...
    
    java org.openadaptor.spring.SpringAdaptor -config map-table-writer-2.xml -props db.props

  You must supply db.props populated appropriately for your environment.
    
  You need the following in your classpath
  
    lib
    lib/openadaptor.jar
    lib/openadaptor-spring.jar
    lib/openadaptor-depends.jar
    <database jar>
  
   ]]>
 </description>

 <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
  <property name="messageProcessor">
   <bean class="org.openadaptor.core.router.Router">
    <description>This creates the simple router: Reader -> MapConverter -> ScriptProcessor -> Writer.</description>
    <property name="processors">
     <list>
      <ref bean="Reader" />
      <ref bean="MapConverter" />
      <ref bean="Writer" />
     </list>
    </property>
   </bean>
  </property>
 </bean>

 <bean id="Reader" class="org.openadaptor.auxil.connector.iostream.reader.FileReadConnector">
  <property name="filename" value="input/input-2.txt" />
 </bean>

 <bean id="MapConverter" class="org.openadaptor.auxil.convertor.delimited.DelimitedStringToOrderedMapConvertor">
  <description>Converts input into an ordered map with two fields.</description>
  <property name="fieldNames">
   <list>
    <value>PARTYID</value>
    <value>SHORTCODE</value>
    <value>LONGNAME</value>
   </list>
  </property>
 </bean>

 <!-- 
    The connection parameters referenced here should be defined in a separate properties file 
      and referenced on the command line via -props <path-to-props-file> 
    -->
  <bean id="JdbcConnection" class="org.openadaptor.auxil.connector.jdbc.JDBCConnection">
	<description>This defines a jdbc connection.</description>
    <property name="driver" value="${db.driver}" />
    <property name="url" value="${db.url}" />
    <property name="username" value="${db.username}" />
    <property name="password" value="${db.password}" />
  </bean>

 <bean id="Writer" class="org.openadaptor.auxil.connector.jdbc.writer.JDBCWriteConnector">
  <description>
   Writer which inserts data into test table.
   The preamble SQL is just to clear the table first.
  </description>
  <property name="jdbcConnection" ref="JdbcConnection" />
  <property name="preambleSQL" value="DELETE FROM PARTY" />
  <property name="writer">
   <bean class="org.openadaptor.auxil.connector.jdbc.writer.map.MapTableWriter">
    <description>When 'outputColumns' is not configured,map keys should match table columns</description>
    <property name="tableName" value="PARTY" />
    <property name="excludeColumns">
    	<list>
    		<value>ID</value>
    	</list>
    </property>
   </bean>
  </property>

 </bean>

</beans>