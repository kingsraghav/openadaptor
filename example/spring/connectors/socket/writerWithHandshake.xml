<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  $Id: writerWithHandshake.xml 2193 2016-12-16 14:42:32Z fschlier $
  $HeadURL: https://openadaptor3.openadaptor.org/svn/openadaptor3/tags/3.4.8/example/spring/connectors/socket/writerWithHandshake.xml $    
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
 
  <description><![CDATA[
  This adaptor does the following...
    
    * reads data to stdin
    * writes data down a socket after a handshake when the connection has been achieved.
    
  It is designed to illustrate the basic structure of an adaptor that connects
  to a socket and writes data
  With the inclusion of the handshake delegate the socket will start a handshake with the socket at the host/port specified. 
  It will send the value of handshakeGreet to that socket and wait for a reply
  If the reply matchs with handshakeReply then the handshake is succesfull.
  If the handshake fails the socket will throw an exception.
  The amount of time that it waits for the reply can be limited by using 
    <property name="handshakeTimeoutMs" value="3000"/>
    
  If the connection to the host/port socket fails you can use:
    <property name="retryPeriod" value="2"/>
    <property name="maxNumRetries" value="5"/>
  to specify that you want the socket to then wait x seconds and to retry y times before the adaptor exits. 
  
  Including <property name="sayGoodbye" value="Bye"/> will result in a final message "Bye" being sent to the 
  socket just before disconnecting 

  Run it like this...
    
    java org.openadaptor.spring.SpringAdaptor -config writerWithHandshake.xml
    
  You need the following in your classpath
  
    lib
    lib/openadaptor.jar
    lib/openadaptor-spring.jar
    lib/openadaptor-depends.jar
    
  If order to run it, needs to connect to the remote socket, run the corresponding
  reader example and input data at the command line
  ]]></description>

  <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
  	<property name="messageProcessor">
  		<bean class="org.openadaptor.core.router.Router">
  			<description>
  				This creates the simple pipeline Reader -> Writer.
  			</description>
  			<property name="processors">
  				<list>
  					<ref bean="Reader" />
  					<ref bean="Writer" />
  				</list>
  			</property>
  		</bean>
  	</property>
  </bean>

  <bean id="Reader" class="org.openadaptor.auxil.connector.iostream.reader.FileReadConnector"/>
  
  <bean id="Writer" class="org.openadaptor.auxil.connector.socket.SocketWriteConnector">
    <description>Writer that connects to remote socket and writes data.</description>
    <property name="remoteHostname" value="localhost"/>
    <property name="port" value="9990"/>
    <property name="retryPeriod" value="2"/>
    <property name="maxNumRetries" value="5"/>
    <property name="socketHandshake" ref="handshaker"/>    
    <property name="handshakeTimeoutMs" value="3000"/>
  </bean>
  
  <bean id="handshaker" class="org.openadaptor.auxil.connector.socket.SimpleSocketHandshake">
    <description>We want to shake hands</description>
    <property name="handshakeGreet" value="Hello"/>
    <property name="handshakeReply" value="HelloBack"/>
    <property name="sayGoodbye" value="Bye"/>
  </bean>

</beans>