<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  $Id: messageproperties-publisher.xml 2081 2010-05-26 09:24:13Z kscully $
  $HeadURL: https://openadaptor3.openadaptor.org/svn/openadaptor3/tags/3.4.9/example/spring/connectors/jms/messageproperties-publisher.xml $
 --> 
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
  <description><![CDATA[  
  This adaptor does the following...
    
    * reads data from stdin
    * add some metadata
    * publishes data to a JMS topic
    
  It is designed to illustrate an adaptor that publishes to a JMS topic. This particular one
  is configured to populate the JMS Message Properties from the adaptor message metadata.

  Run this example like this...

  java org.openadaptor.spring.SpringAdaptor -config messageproperties-publisher.xml -props ../../../config/jms_*.properties
  
  using the appropriate jms property file.

  Suggested Classpath:

    lib
    lib/openadaptor.jar
    lib/openadaptor-spring.jar
    lib/openadaptor-depends.jar
    appropiate jms client jars
     
  Once the example is running you need to type some data into the command line. To
  verify that this is working you need to be running the corresponding
  messageproperties-subscriber example.
  ]]></description>
  
 <bean id="Adaptor" class="org.openadaptor.core.adaptor.Adaptor">
   <property name="messageProcessor">
      <bean class="org.openadaptor.core.router.Router">
        <description>
          This creates the simple pipeline Reader -> MetadataProcessor -> Writer.
        </description>
        <property name="processors">
          <list>
            <ref bean="Reader"/>
            <ref bean="MetadataProcessor"/>
            <ref bean="Writer"/>
          </list>
        </property>
      </bean>
   </property>
  </bean>
  
  <bean id="Reader" class="org.openadaptor.auxil.connector.iostream.reader.FileReadConnector"/>

  <bean id="MetadataProcessor" class="org.openadaptor.auxil.processor.script.ScriptProcessor">
  <description>Add some metadata to the message.</description>
    <property name="script">
      <value>
        // Jboss Note: During testing we found that Jboss doesn't like having a space in the Key.
        // I.e while "TestKey" below is accepted "Test Key" causes an error.
        oa_metadata.put("TestKey","Test Value (from MetadataProcessor)");
      </value>
    </property>
  </bean>
  

  <bean id="JndiConnection" class="org.openadaptor.auxil.connector.jndi.JNDIConnection">
    <description>
      This defines jndi connection, from which we get jms connection.
    </description>
    <property name="initialContextFactory" value="${jndi.initialContextFactory}"/>
    <property name="providerUrl" value="${jndi.providerUrl}"/>
    <property name="securityPrincipal" value="${jndi.securityPrincipal}"/>
    <property name="securityCredentials" value="${jndi.securityCredentials}"/>
    <!-- 
      Uncomment the following property to specify an alternate provider url. 
      Currently only JMSConnection can take advantage of this feature 
    -->
    <!--    
    <property name="alternateProviderUrl" value="url goes here"/>
    -->
  </bean>
  
  <bean id="JmsConnection" class="org.openadaptor.auxil.connector.jms.JMSConnection">
    <description>jms connection for queue we wish to publish to.</description>
    <property name="jndiConnection" ref="JndiConnection"/>
    <property name="connectionFactoryName" value="${jms.tp.connectionFactoryName.1}"/>
    <property name="username" value="${jms.username}"/>
    <property name="password" value="${jms.password}"/>
  </bean>
  
  <bean id="Writer" class="org.openadaptor.auxil.connector.jms.JMSWriteConnector">
    <description>writer that publishes data onto a queue.</description>
    <property name="destinationName" value="${jms.t.destinationName.1}"/>
    <property name="jmsConnection" ref="JmsConnection"/>
    <property name="propagateMetadata" value="true"/>
  </bean>

</beans>
